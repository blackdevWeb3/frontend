/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "@across-protocol/contracts/dist/typechain/common";

export namespace SpokePoolV3PeripheryInterface {
  export type FeesStruct = { amount: BigNumberish; recipient: string };

  export type FeesStructOutput = [BigNumber, string] & {
    amount: BigNumber;
    recipient: string;
  };

  export type BaseDepositDataStruct = {
    inputToken: string;
    outputToken: string;
    outputAmount: BigNumberish;
    depositor: string;
    recipient: string;
    destinationChainId: BigNumberish;
    exclusiveRelayer: string;
    quoteTimestamp: BigNumberish;
    fillDeadline: BigNumberish;
    exclusivityParameter: BigNumberish;
    message: BytesLike;
  };

  export type BaseDepositDataStructOutput = [
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    number,
    number,
    number,
    string,
  ] & {
    inputToken: string;
    outputToken: string;
    outputAmount: BigNumber;
    depositor: string;
    recipient: string;
    destinationChainId: BigNumber;
    exclusiveRelayer: string;
    quoteTimestamp: number;
    fillDeadline: number;
    exclusivityParameter: number;
    message: string;
  };

  export type SwapAndDepositDataStruct = {
    submissionFees: SpokePoolV3PeripheryInterface.FeesStruct;
    depositData: SpokePoolV3PeripheryInterface.BaseDepositDataStruct;
    swapToken: string;
    exchange: string;
    transferType: BigNumberish;
    swapTokenAmount: BigNumberish;
    minExpectedInputTokenAmount: BigNumberish;
    routerCalldata: BytesLike;
  };

  export type SwapAndDepositDataStructOutput = [
    SpokePoolV3PeripheryInterface.FeesStructOutput,
    SpokePoolV3PeripheryInterface.BaseDepositDataStructOutput,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
  ] & {
    submissionFees: SpokePoolV3PeripheryInterface.FeesStructOutput;
    depositData: SpokePoolV3PeripheryInterface.BaseDepositDataStructOutput;
    swapToken: string;
    exchange: string;
    transferType: number;
    swapTokenAmount: BigNumber;
    minExpectedInputTokenAmount: BigNumber;
    routerCalldata: string;
  };
}

export interface SpokePoolPeripheryProxyInterface extends utils.Interface {
  functions: {
    "SPOKE_POOL_PERIPHERY()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "swapAndBridge(((uint256,address),(address,address,uint256,address,address,uint256,address,uint32,uint32,uint32,bytes),address,address,uint8,uint256,uint256,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "SPOKE_POOL_PERIPHERY"
      | "initialize"
      | "multicall"
      | "swapAndBridge"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "SPOKE_POOL_PERIPHERY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndBridge",
    values: [SpokePoolV3PeripheryInterface.SwapAndDepositDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "SPOKE_POOL_PERIPHERY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAndBridge",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SpokePoolPeripheryProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpokePoolPeripheryProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SPOKE_POOL_PERIPHERY(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _spokePoolPeriphery: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAndBridge(
      swapAndDepositData: SpokePoolV3PeripheryInterface.SwapAndDepositDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  SPOKE_POOL_PERIPHERY(overrides?: CallOverrides): Promise<string>;

  initialize(
    _spokePoolPeriphery: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAndBridge(
    swapAndDepositData: SpokePoolV3PeripheryInterface.SwapAndDepositDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    SPOKE_POOL_PERIPHERY(overrides?: CallOverrides): Promise<string>;

    initialize(
      _spokePoolPeriphery: string,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    swapAndBridge(
      swapAndDepositData: SpokePoolV3PeripheryInterface.SwapAndDepositDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    SPOKE_POOL_PERIPHERY(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _spokePoolPeriphery: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapAndBridge(
      swapAndDepositData: SpokePoolV3PeripheryInterface.SwapAndDepositDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SPOKE_POOL_PERIPHERY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _spokePoolPeriphery: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAndBridge(
      swapAndDepositData: SpokePoolV3PeripheryInterface.SwapAndDepositDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
