/* Autogenerated file. Do not edit manually. */
/* tslint:disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SpokePoolPeripheryProxy,
  SpokePoolPeripheryProxyInterface,
} from "../SpokePoolPeripheryProxy";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ContractInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPeriphery",
    type: "error",
  },
  {
    inputs: [],
    name: "SPOKE_POOL_PERIPHERY",
    outputs: [
      {
        internalType: "contract SpokePoolV3Periphery",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract SpokePoolV3Periphery",
        name: "_spokePoolPeriphery",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct SpokePoolV3PeripheryInterface.Fees",
            name: "submissionFees",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "inputToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "outputToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "outputAmount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "depositor",
                type: "address",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "destinationChainId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "exclusiveRelayer",
                type: "address",
              },
              {
                internalType: "uint32",
                name: "quoteTimestamp",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "fillDeadline",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "exclusivityParameter",
                type: "uint32",
              },
              {
                internalType: "bytes",
                name: "message",
                type: "bytes",
              },
            ],
            internalType:
              "struct SpokePoolV3PeripheryInterface.BaseDepositData",
            name: "depositData",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "swapToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "exchange",
            type: "address",
          },
          {
            internalType: "enum SpokePoolV3PeripheryInterface.TransferType",
            name: "transferType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "swapTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minExpectedInputTokenAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "routerCalldata",
            type: "bytes",
          },
        ],
        internalType: "struct SpokePoolV3PeripheryInterface.SwapAndDepositData",
        name: "swapAndDepositData",
        type: "tuple",
      },
    ],
    name: "swapAndBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461002157600160ff195f5416175f55610ee790816100268239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063894adf3014610054578063991fe5901461004f578063ac9650d81461004a5763c4d66de814610045575f80fd5b6103e1565b61033b565b610213565b34610205577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc602081360112610205576004359067ffffffffffffffff821161020557610120908236030112610205576100ac61085f565b6100d77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f54165f55565b61013e6101026100e96064840161086b565b73ffffffffffffffffffffffffffffffffffffffff1690565b60c48301359061011482303384610c21565b5f546101389060101c73ffffffffffffffffffffffffffffffffffffffff166100e9565b90610c9d565b5f546101629060101c73ffffffffffffffffffffffffffffffffffffffff166100e9565b803b15610205575f6101a88192846040519485809481937f894adf3000000000000000000000000000000000000000000000000000000000835260040160048301610af5565b03925af18015610200576101e7575b6101e560017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f5416175f55565b005b806101f46101fa9261056c565b80610209565b806101b7565b610c16565b5f80fd5b5f91031261020557565b34610205575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020557602073ffffffffffffffffffffffffffffffffffffffff5f5460101c16604051908152f35b5f5b8381106102775750505f910152565b8181015183820152602001610268565b602080820190808352835180925260408301928160408460051b8301019501935f915b8483106102ba5750505050505090565b909192939495848080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8c5161032781518092818752878088019101610266565b0116010198019301930191949392906102aa565b346102055760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102055767ffffffffffffffff6004358181116102055736602382011215610205578060040135918211610205573660248360051b83010111610205576103bf9160246103b39201610778565b60405191829182610287565b0390f35b73ffffffffffffffffffffffffffffffffffffffff81160361020557565b346102055760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102055760043561041c816103c3565b61042461085f565b61044f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f54165f55565b5f5460ff8160081c16610515577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100175f5573ffffffffffffffffffffffffffffffffffffffff81163b156104eb576101b7907fffffffffffffffffffff0000000000000000000000000000000000000000ffff75ffffffffffffffffffffffffffffffffffffffff00005f549260101b169116175f55565b60046040517fd07c0ecb000000000000000000000000000000000000000000000000000000008152fd5b60046040517f9f4eefba000000000000000000000000000000000000000000000000000000008152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff811161058057604052565b61053f565b6080810190811067ffffffffffffffff82111761058057604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761058057604052565b67ffffffffffffffff81116105805760051b60200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b91908110156106875760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561020557019081359167ffffffffffffffff8311610205576020018236038113610205579190565b6105fa565b908092918237015f815290565b67ffffffffffffffff811161058057601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b3d156106fd573d906106e482610699565b916106f260405193846105a1565b82523d5f602084013e565b606090565b6020818303126102055780519067ffffffffffffffff8211610205570181601f8201121561020557805161073581610699565b9261074360405194856105a1565b81845260208284010111610205576107619160208085019101610266565b90565b80518210156106875760209160051b010190565b919091610784836105e2565b90604061079460405193846105a1565b8483527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06107c1866105e2565b015f5b81811061084e57505082945f5b8181106107df575050505050565b5f806107ec838588610627565b906107fb87518093819361068c565b0390305af46108086106d3565b901561082e579060019161081c8288610764565b526108278187610764565b50016107d1565b604481511061020557806004610205920151602480918301019101610702565b8060606020809388010152016107c4565b60ff5f54161561020557565b35610761816103c3565b3590610880826103c3565b565b90357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea182360301811215610205570190565b359063ffffffff8216820361020557565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561020557016020813591019167ffffffffffffffff821161020557813603831361020557565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b6107619161016081610983829361096986610875565b73ffffffffffffffffffffffffffffffffffffffff169052565b6109af61099260208601610875565b73ffffffffffffffffffffffffffffffffffffffff166020830152565b604084013560408201526109e56109c860608601610875565b73ffffffffffffffffffffffffffffffffffffffff166060830152565b610a116109f460808601610875565b73ffffffffffffffffffffffffffffffffffffffff166080830152565b60a084013560a0820152610a47610a2a60c08601610875565b73ffffffffffffffffffffffffffffffffffffffff1660c0830152565b610a63610a5660e086016108b4565b63ffffffff1660e0830152565b610a80610100610a748187016108b4565b63ffffffff1690830152565b610a91610120610a748187016108b4565b610aa161014094858101906108c5565b9390948201520191610915565b3590600382101561020557565b906003821015610ac85752565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b9061076191602081528135602082015273ffffffffffffffffffffffffffffffffffffffff6020830135610b28816103c3565b166040820152610b3b6040830183610882565b610be6610b5661012092836060860152610140850190610953565b93610b83610b6660608301610875565b73ffffffffffffffffffffffffffffffffffffffff166080860152565b610baf610b9260808301610875565b73ffffffffffffffffffffffffffffffffffffffff1660a0860152565b610bc8610bbe60a08301610aae565b60c0860190610abb565b60c081013560e085015261010060e0820135818601528101906108c5565b9290917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082860301910152610915565b6040513d5f823e3d90fd5b9290604051927f23b872dd00000000000000000000000000000000000000000000000000000000602085015273ffffffffffffffffffffffffffffffffffffffff809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff8411176105805761088092604052610ddd565b91909160405191602083015f807f095ea7b3000000000000000000000000000000000000000000000000000000009384845273ffffffffffffffffffffffffffffffffffffffff908189166024890152604488015260448752610cff87610585565b85169286519082855af190610d126106d3565b82610d93575b5081610d88575b5015610d2c575b50505050565b604051602081019190915273ffffffffffffffffffffffffffffffffffffffff9390931660248401525f6044808501919091528352610d7f92610d7a90610d746064826105a1565b82610ddd565b610ddd565b5f808080610d26565b90503b15155f610d1f565b80519192508115918215610dab575b5050905f610d18565b610dbe9250602080918301019101610dc5565b5f80610da2565b90816020910312610205575180151581036102055790565b73ffffffffffffffffffffffffffffffffffffffff166040516040810181811067ffffffffffffffff82111761058057610e58937f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460205f948594604052818152015260208151910182855af1610e526106d3565b91610e88565b8051908115918215610e6e575b50501561020557565b610e819250602080918301019101610dc5565b5f80610e65565b9015610ea257815115610e99575090565b3b156102055790565b50805190811561020557602001fdfea26469706673582212207b2f1c8c1d5063a21ba98aa274966178205f188d68c4886cd240583330d63c3d64736f6c63430008170033";

type SpokePoolPeripheryProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SpokePoolPeripheryProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SpokePoolPeripheryProxy__factory extends ContractFactory {
  constructor(...args: SpokePoolPeripheryProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<SpokePoolPeripheryProxy> {
    return super.deploy(overrides || {}) as Promise<SpokePoolPeripheryProxy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SpokePoolPeripheryProxy {
    return super.attach(address) as SpokePoolPeripheryProxy;
  }
  override connect(signer: Signer): SpokePoolPeripheryProxy__factory {
    return super.connect(signer) as SpokePoolPeripheryProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SpokePoolPeripheryProxyInterface {
    return new utils.Interface(_abi) as SpokePoolPeripheryProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SpokePoolPeripheryProxy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SpokePoolPeripheryProxy;
  }
}
